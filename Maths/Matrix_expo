#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
const int MOD = 1e9 + 7;

ll n, k;

typedef vector<vector<ll>> Matrix;

Matrix matrixMultiplication(const Matrix &A, const Matrix &B)
{
    Matrix result(n, vector<ll>(n, 0));
    for (int i = 0; i < n; ++i)
    {
        for (int j = 0; j < n; ++j)
        {
            for (int k = 0; k < n; ++k)
            {
                result[i][j] = (result[i][j] + (1LL * A[i][k] * B[k][j]) % MOD) % MOD;
            }
        }
    }
    return result;
}

Matrix matrixExponentiation(const Matrix &base, ll exponent)
{

    if (exponent == 0)
    {
        Matrix identity(n, vector<ll>(n, 0));
        for (int i = 0; i < n; ++i)
            identity[i][i] = 1;
        return identity;
    }

    Matrix half = matrixExponentiation(base, exponent / 2);
    Matrix result = matrixMultiplication(half, half);

    if (exponent & 1)
        result = matrixMultiplication(result, base);

    return result;
}

void solve()
{
    ll N, K;
    cin >> N >> K;

    n = N;
    k = K;

    Matrix adj(n, vector<ll>(n));

    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            cin >> adj[i][j];
        }
    }

    Matrix base = matrixExponentiation(adj, k);

    ll ans = 0;

    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            ans = (ans + base[i][j]) % MOD;
        }
    }
    cout << ans << "\n";
}

int main()
{
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int T;
    cin >> T;
    while (T--)
    {
        solve();
    }

    return 0;
}
